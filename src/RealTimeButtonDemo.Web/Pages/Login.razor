@page "/login"
@using RealTimeButtonDemo.Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="login-container">
    <div class="login-card">
        <h2 class="text-center mb-4">Login to Real-Time Button Demo</h2>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
            <div class="form-group mb-3">
                <label for="username">Username:</label>
                <InputText id="username" class="form-control" @bind-Value="loginRequest.Username" placeholder="admin, demo, or test" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" placeholder="admin123" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                Login
            </button>
        </EditForm>

        <div class="mt-4 text-center">
            <small class="text-muted">
                <strong>Demo Credentials:</strong><br>
                Username: admin, demo, or test<br>
                Password: admin123
            </small>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var response = await Http.PostAsJsonAsync("/api/auth/login", loginRequest);
            
            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
                
                if (loginResponse != null)
                {
                    // Store token in localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "auth_token", loginResponse.Token);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", loginResponse.Username);
                    
                    // Redirect to dashboard
                    Navigation.NavigateTo("/dashboard");
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = "Invalid credentials. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Connection error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        padding: 20px;
    }

    .login-card {
        background: white;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group label {
        font-weight: 600;
        margin-bottom: 5px;
        display: block;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        font-weight: 600;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }
</style>