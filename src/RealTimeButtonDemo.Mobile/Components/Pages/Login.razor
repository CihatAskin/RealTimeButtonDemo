@page "/login"
@using RealTimeButtonDemo.Mobile.Services
@using RealTimeButtonDemo.Shared.DTOs
@inject MauiAuthenticationService AuthService
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <h2>Real-Time Button Demo</h2>
        <h4>Mobile Login</h4>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
        
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="username" @bind:event="oninput" class="form-control" placeholder="Enter username" />
        </div>
        
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" @bind="password" @bind:event="oninput" class="form-control" placeholder="Enter password" />
        </div>
        
        <div class="form-group">
            <label for="apiUrl">API Server URL:</label>
            <input type="text" id="apiUrl" @bind="apiUrl" @bind:event="oninput" class="form-control" placeholder="http://localhost:5000" />
        </div>
        
        <button type="button" @onclick="Login" class="btn btn-primary btn-block" disabled="@isLoading">
            @if (isLoading)
            {
                <span>Logging in...</span>
            }
            else
            {
                <span>Login</span>
            }
        </button>
        
        <div class="help-text">
            <p><strong>Demo Credentials:</strong></p>
            <p>Username: admin, demo, or test</p>
            <p>Password: admin123</p>
        </div>
    </div>
</div>

@code {
    private string username = "";
    private string password = "";
    private string apiUrl = "http://localhost:5000";
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task Login()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Please enter both username and password";
            return;
        }

        isLoading = true;
        errorMessage = "";

        try
        {
            var result = await AuthService.LoginAsync(username, password, apiUrl);
            
            if (result.Success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = result.Error ?? "Login failed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Connection error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        background-color: #f5f5f5;
    }

    .login-card {
        background: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .login-card h2 {
        text-align: center;
        margin-bottom: 10px;
        color: #333;
    }

    .login-card h4 {
        text-align: center;
        margin-bottom: 30px;
        color: #666;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #555;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .btn-primary:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    .btn-block {
        width: 100%;
    }

    .alert {
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 5px;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .help-text {
        margin-top: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 5px;
        font-size: 14px;
        color: #666;
    }

    .help-text p {
        margin: 5px 0;
    }
</style>